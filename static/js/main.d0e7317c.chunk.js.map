{"version":3,"sources":["components/square/index.tsx","components/board/index.tsx","components/information/index.tsx","components/reset/index.tsx","components/game/index.tsx","util/methods.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","styled","button","Square","onClick","value","BoardWrapper","div","Board","board","game","useContext","GameContext","map","square","i","handleClick","InformationWrapper","Information","winner","xIsNext","StyledButton","Reset","handleReset","createContext","Game","freshState","Array","fill","useState","setBoard","setXIsNext","setWinner","useEffect","squares","lines","length","a","b","c","calculateWinner","Provider","boardCopy","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wcAGA,IAAMA,EAASC,IAAOC,OAAV,KAaGC,EAJqC,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,MAAX,OAChD,cAACL,EAAD,CAAQI,QAASA,EAAjB,SAA2BC,K,yPCR/B,IAAMC,EAAeL,IAAOM,IAAV,KAuBHC,EAXV,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACAC,EAAOC,qBAAWC,GACxB,OACE,cAACN,EAAD,UACGG,EAAMI,KAAI,SAACC,EAAQC,GAAT,OACT,cAAC,EAAD,CAAgBV,MAAOS,EAAQV,QAAS,kBAAMM,EAAKM,YAAYD,KAAlDA,S,2ICnBrB,IAAME,EAAqBhB,IAAOM,IAAV,KAeTW,EATsD,SAAC,GAAD,IACnEC,EADmE,EACnEA,OACAC,EAFmE,EAEnEA,QAFmE,OAInE,eAACH,EAAD,WACGE,GAAU,2CAAcA,MACvBA,GAAU,sCAAOC,EAAU,IAAM,IAAvB,kB,0NCXhB,IAAMC,EAAepB,IAAOC,OAAV,KAeHoB,EALD,WACZ,IAAMZ,EAAOC,qBAAWC,GACxB,OAAO,cAACS,EAAD,CAAcjB,QAAS,kBAAMM,EAAKa,eAAlC,oBCVIX,EAAcY,wBAAc,CACvCR,YAAa,SAACD,KACdQ,YAAa,eAkCAE,EA/BF,WACX,IAAMC,EAAaC,MAAM,GAAGC,KAAK,MADhB,EAESC,mBAASH,GAFlB,mBAEVjB,EAFU,KAEHqB,EAFG,OAGaD,oBAAS,GAHtB,mBAGVT,EAHU,KAGDW,EAHC,OAIWF,mBAAwB,MAJnC,mBAIVV,EAJU,KAIFa,EAJE,KAUjB,OAJAC,qBAAU,WACRD,EClBG,SAAyBE,GAW5B,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFpB,EAAI,EAAGA,EAAIoB,EAAMC,OAAQrB,IAAK,CAAC,IAAD,cACjBoB,EAAMpB,GADW,GAC5BsB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIL,EAAQG,IAAMH,EAAQG,KAAOH,EAAQI,IAAMJ,EAAQG,KAAOH,EAAQK,GAClE,OAAOL,EAAQG,GAIvB,OAAO,KDAGG,CAAgB/B,MACzB,CAACA,IAGF,eAACG,EAAY6B,SAAb,CACEpC,MAAO,CACLW,YAAa,SAACD,GACZ,IAAM2B,EAAS,YAAOjC,GAClBU,GAAUuB,EAAU3B,KACxB2B,EAAU3B,GAAKK,EAAU,IAAM,IAC/BU,EAASY,GACTX,GAAYX,KAEdG,YAAa,WACXO,EAASJ,KAVf,UAcE,cAAC,EAAD,CAAaP,OAAQA,EAAQC,QAASA,IACtC,cAAC,EAAD,IACA,cAAC,EAAD,CAAOX,MAAOA,QEhCLkC,EAFH,kBAAM,cAAC,EAAD,KCUHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0e7317c.chunk.js","sourcesContent":["import {FC} from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  background: lightblue;\n  border: 2px solid darkblue;\n  font-size: 30px;\n  font-weight: 800;\n  cursor: pointer;\n  outline: none;\n`;\n\nconst Square: FC<{ onClick: any, value: string }> = ({onClick, value}) => (\n    <Button onClick={onClick}>{value}</Button>\n);\n\nexport default Square\n","import Square from \"../square\";\nimport styled from \"styled-components\";\nimport { FC, useContext } from \"react\";\nimport { GameContext } from \"../game\";\n\nconst BoardWrapper = styled.div`\n  border: 4px solid darkblue;\n  border-radius: 10px;\n  width: 250px;\n  height: 250px;\n  margin: 0 auto;\n  display: grid;\n  grid-template: repeat(3, 1fr) / repeat(3, 1fr);\n`;\n\nconst Board: FC<{\n  board: string[];\n}> = ({ board }) => {\n  const game = useContext(GameContext);\n  return (\n    <BoardWrapper>\n      {board.map((square, i) => (\n        <Square key={i} value={square} onClick={() => game.handleClick(i)} />\n      ))}\n    </BoardWrapper>\n  );\n};\n\nexport default Board;\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nconst InformationWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  font-weight: bold;\n`;\n\nconst Information: FC<{ winner: string | null; xIsNext: boolean }> = ({\n  winner,\n  xIsNext,\n}) => (\n  <InformationWrapper>\n    {winner && <p>Winner is {winner}</p>}\n    {!winner && <p>{`${xIsNext ? \"X\" : \"O\"} to play`}</p>}\n  </InformationWrapper>\n);\nexport default Information;\n","import styled from \"styled-components\";\nimport { useContext } from \"react\";\nimport { GameContext } from \"../game\";\n\nconst StyledButton = styled.button`\n  background: #61dafb;\n  color: #000;\n  border: 2px solid darkblue;\n  cursor: pointer;\n  display: flex;\n  margin: 5px auto;\n  padding: 5px;\n`;\n\nconst Reset = () => {\n  const game = useContext(GameContext);\n  return <StyledButton onClick={() => game.handleReset()}>RESET</StyledButton>;\n};\n\nexport default Reset;\n","import Board from \"../board\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { calculateWinner } from \"../../util/methods\";\nimport Information from \"../information\";\nimport Reset from \"../reset\";\n\nexport const GameContext = createContext({\n  handleClick: (i: number) => {},\n  handleReset: () => {},\n});\n\nconst Game = () => {\n  const freshState = Array(9).fill(null);\n  const [board, setBoard] = useState(freshState);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [winner, setWinner] = useState<string | null>(null);\n\n  useEffect(() => {\n    setWinner(calculateWinner(board));\n  }, [board]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        handleClick: (i: number) => {\n          const boardCopy = [...board];\n          if (winner || boardCopy[i]) return;\n          boardCopy[i] = xIsNext ? \"X\" : \"O\";\n          setBoard(boardCopy);\n          setXIsNext(!xIsNext);\n        },\n        handleReset: () => {\n          setBoard(freshState);\n        },\n      }}\n    >\n      <Information winner={winner} xIsNext={xIsNext} />\n      <Reset />\n      <Board board={board} />\n    </GameContext.Provider>\n  );\n};\nexport default Game;\n","export function calculateWinner(squares: string []): string | null {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n\n    return null;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/game\";\n\nconst App = () => <Game />;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}